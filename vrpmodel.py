from sklearn.manifold import MDS
from agent import Agent
from solution import checkSubtour, Combination2, optimizer

V = 17
L = 4
d = [
[9999, 3, 5, 48, 48, 8, 8, 5, 5, 3, 3, 7, 3, 5, 8, 8, 5],
 [3, 9999, 3, 48, 48, 8, 8, 5, 5, 7, 7, 3, 19, 3, 8, 8, 5],
 [5, 3, 9999, 72, 72, 48, 48, 24, 24, 3, 3, 5, 3, 0, 48, 48, 24],
 [48, 48, 74, 9999, 0, 6, 6, 12, 12, 48, 48, 48, 48, 74, 6, 6, 12],
 [48, 48, 74, 0, 9999, 6, 6, 12, 12, 48, 48, 48, 48, 74, 6, 6, 12],
 [8, 8, 50, 6, 6, 9999, 0, 8, 8, 8, 8, 8, 8, 50, 12, 12, 8],
 [8, 8, 50, 6, 6, 0, 9999, 8, 8, 8, 8, 8, 8, 50, 12, 12, 8],
 [5, 5, 26, 12, 12, 8, 8, 9999, 12, 5, 5, 5, 5, 26, 8, 8, 7],
 [5, 5, 26, 12, 12, 8, 8, 12, 9999, 5, 5, 5, 5, 26, 8, 8, 7],
 [3, 7, 3, 48, 48, 8, 8, 5, 5, 9999, 14, 3, 0, 3, 8, 8, 5],
 [3, 7, 3, 48, 48, 8, 8, 5, 5, 14, 9999, 3, 0, 3, 8, 8, 5],
 [7, 3, 5, 48, 48, 8, 8, 5, 5, 3, 3, 9999, 3, 5, 8, 8, 5],
 [3, 19, 3, 48, 48, 8, 8, 5, 5, 0, 0, 3, 9999, 3, 8, 8, 5],
 [5, 3, 0, 72, 72, 48, 48, 24, 24, 3, 3, 5, 3, 9999, 48, 48, 24],
 [8, 8, 50, 6, 6, 12, 12, 8, 8, 8, 8, 8, 8, 50, 9999, 0, 8],
 [8, 8, 50, 6, 6, 12, 12, 8, 8, 8, 8, 8, 8, 50, 0, 9999, 8],
 [5, 5, 26, 12, 12, 8, 8, 7, 7, 5, 5, 5, 5, 26, 8, 8, 9999]
]

# d = [
# [99999, 548, 776, 696, 582, 274, 502, 194, 308, 194, 536, 502, 388, 354, 468, 776, 662],
#       [548, 99999, 684, 308, 194, 502, 730, 354, 696, 742, 1084, 594, 480, 674, 1016, 868, 1210],
#       [776, 684, 99999, 992, 878, 502, 274, 810, 468, 742, 400, 1278, 1164, 1130, 788, 1552, 754],
#       [696, 308, 992, 99999, 114, 650, 878, 502, 844, 890, 1232, 514, 628, 822, 1164, 560, 1358],
#       [582, 194, 878, 114, 99999, 536, 764, 388, 730, 776, 1118, 400, 514, 708, 1050, 674, 1244],
#       [274, 502, 502, 650, 536, 99999, 228, 308, 194, 240, 582, 776, 662, 628, 514, 1050, 708],
#       [502, 730, 274, 878, 764, 228, 99999, 536, 194, 468, 354, 1004, 890, 856, 514, 1278, 480],
#       [194, 354, 810, 502, 388, 308, 536, 99999, 342, 388, 730, 468, 354, 320, 662, 742, 856],
#       [308, 696, 468, 844, 730, 194, 194, 342, 99999, 274, 388, 810, 696, 662, 320, 1084, 514],
#       [194, 742, 742, 890, 776, 240, 468, 388, 274, 99999, 342, 536, 422, 388, 274, 810, 468],
#       [536, 1084, 400, 1232, 1118, 582, 354, 730, 388, 342, 99999, 878, 764, 730, 388, 1152, 354],
#       [502, 594, 1278, 514, 400, 776, 1004, 468, 810, 536, 878, 99999, 114, 308, 650, 274, 844],
#       [388, 480, 1164, 628, 514, 662, 890, 354, 696, 422, 764, 114, 99999, 194, 536, 388, 730],
#       [354, 674, 1130, 822, 708, 628, 856, 320, 662, 388, 730, 308, 194, 99999, 342, 422, 536],
#       [468, 1016, 788, 1164, 1050, 514, 514, 662, 320, 274, 388, 650, 536, 342, 99999, 764, 194],
#       [776, 868, 1552, 560, 674, 1050, 1278, 742, 1084, 810, 1152, 274, 388, 422, 764, 99999, 798],
#       [662, 1210, 754, 1358, 1244, 708, 480, 856, 514, 468, 354, 844, 730, 536, 194, 798, 99999],
# ]

nodesMin0 = list(range(1, V))
S = Combination2(V - 1, nodesMin0)

mapper = MDS(n_components=2)
map = mapper.fit_transform(d)

totaldist = 0
for i in range(V):
    for j in range(V):
        if d[i][j] != 9999:
            totaldist += d[i][j]

objective = optimizer(S, V, L, map, d)

# objective = optimizer([[7, 4, 8, 9, 6]], V, L, map, d)

S = []

opt = optimizer([], V, L, map, d)
subtours = checkSubtour(V, L, opt[1], opt[2])
S = Combination2(len(subtours), subtours)

print(S)

agent = Agent(S, len(S), len(S))
batch = 10
episodes = 10000

for episode in range(episodes):
    SEC = []
    state = -1
    reward = 0
    for iter in range(agent.seclen):
        # perform action
        action = agent.action(state)
        SEC.append(S[action])
        solution = optimizer(SEC, V, L, map, d)
        
        # get reward for action
        orphans = checkSubtour(V, L, solution[1], solution[2])
        if len(orphans) == 0:
            reward += (totaldist - solution[0]) / 1000
            agent.remember(state, action, reward, action, True, objective[0], solution[0], -1)
            break
        else:
            agent.remember(state, action, reward, action, False, objective[0], solution[0], -1)
        state = action
        if len(agent.memory) >= batch:
            agent.tuning(batch)
    if len(agent.memory) != 0:
        agent.memory[len(agent.memory) - 1][4] = True
    if agent.epsilon <= agent.epsilon_min:
        print(S[action])
        print("Optimal solution: ", objective[0])
        print("Model solution: ", solution[0])
        break
        